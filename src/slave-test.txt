#include <Arduino.h>
#include <Adafruit_I2CDevice.h>
#include <SPI.h>

// ESP32 Serial Monitor
#define SerialMon Serial

// I2C Library
#include <Wire.h>

// GSM Library
#define TINY_GSM_MODEM_SIM7600
// GSM Serial Monitor
HardwareSerial SerialAT(1);

// GSM RX/TX Buffer - GSM Intiation
#if !defined(TINY_GSM_RX_BUFFER)
#define TINY_GSM_RX_BUFFER 1024
#endif
#define TINY_GSM_YIELD() \
  {                      \
    delay(2);            \
  }

// GSM and httpclient libraries
#include <TinyGsmClient.h>
#include <ArduinoHttpClient.h>
#include "SSLClient.h"

TinyGsm modem(SerialAT);

// GSM Pins - GSM Intiation
#define GSM_PIN "0000"
#define UART_BAUD 115200
#define PIN_DTR      25
#define PIN_TX       26
#define PIN_RX       27
#define PWR_PIN      4
#define PIN_RI       33
#define RESET        5
#define BAT_ADC      35
#define BAT_EN       12

// Website Credentials
const char apn[] = "internet"; // Change this to your Provider details
const char gprsUser[] = "";
const char gprsPass[] = "";
const char server[] = "development.kloudtechsea.com"; // Change this to your selection
const char resource[] = "https://development.kloudtechsea.com/Kloudtrackv4/weather/WeatherReadings/insertDecrypt.php";

const int port = 443;
unsigned long timeout;

//HTTPS Transport
TinyGsmClient base_client(modem,0);
SSLClient secure_layer(&base_client);
HttpClient client = HttpClient(secure_layer,server,port);

// Sleep Factors
#define uS_TO_S_FACTOR 1000 /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP 60000 /* Time ESP32 will go to sleep (in seconds) */

int sleeptimer(int x, int y)
{
  // note f2 cannot be 0
  return y - (x % y);
}

// Slave Address
#define SLAVE_ADDR 0x01

// Rain Gauge and Wind Speed var
float table[] = {0,0};
float precipitation = 0, windspeed = 0;
const float pi = 3.14159265359;
int period = 60000, delaytime = 2000, radius = 100;
unsigned int Sample = 0, RPM = 0;

// Encryption libraries
#include <base64.h>
#include <AESLib.h>
#include <AES.h>
#include <AES_config.h>

// Encryption Variables
String key_str="aaaaaaaaaaaaaaaa";// 16 bytes
String iv_str="aaaaaaaaaaaaaaaa"; //16 bytes

AES aes;

byte encryptedPrecipitation[1000];
byte encryptedWindspeed[1000];
char b64Precipitation[1000];
char b64Windspeed[1000];

void getSlave() 
{
  Wire.requestFrom(SLAVE_ADDR, sizeof(table) * sizeof(float));
  for (int i = 0; i < 2; i++) {
    byte counterBytes[sizeof(float)];
    for (int j = 0; j < sizeof(float); j++)
    {
      counterBytes[j] = Wire.read();
    }
    float value;
    memcpy(&value, &counterBytes, sizeof(float));
    table[i] = value;
  }
  precipitation = (int)table[0] * 0.2;
  SerialMon.print("Precipitation: ");
  SerialMon.print(precipitation);
  SerialMon.println(" ");

  RPM = ((int)table[1]) / (period / 1000);
  windspeed = (((4 * pi * radius * RPM) / 60) / 1000) * 3.6;
  SerialMon.print("Wind Speed: ");
  SerialMon.print(windspeed);
  SerialMon.println(" ");
}

void GSMinit() 
{
  // A7670-GSM Reset
  pinMode(RESET, OUTPUT);
  digitalWrite(RESET, LOW);
  delay(100);
  digitalWrite(RESET, HIGH);
  delay(3000);
  digitalWrite(RESET, LOW);

  // A7670-GSM Power
  pinMode(PWR_PIN, OUTPUT);
  digitalWrite(PWR_PIN, LOW);
  delay(100);
  digitalWrite(PWR_PIN, HIGH);
  delay(1000);
  digitalWrite(PWR_PIN, LOW);
}

// Encryption function
void do_encrypt(String msg, String key_str, String iv_str, byte* cipher, char *b64) {
  byte iv[16];
  // copy the iv_str content to the array.
  memcpy(iv,(byte *) iv_str.c_str(), 16);

  // use base64 encoder to encode the message content. It is optional step.
  int blen=base64_encode(b64,(char *)msg.c_str(),msg.length());

  // calculate the output size:
  aes.calc_size_n_pad(blen);
  // custom padding, in this case, we use zero padding:
  int len=aes.get_size();
  byte plain_p[len];
  for(int i=0;i<blen;++i) plain_p[i]=b64[i];
  for(int i=blen;i<len;++i) plain_p[i]='\0';

  // do AES-128-CBC encryption:
  int blocks = len / 16;
  aes.set_key ((byte *)key_str.c_str(), 16);
  aes.cbc_encrypt (plain_p, cipher, blocks, iv);

  // use base64 encoder to encode the encrypted data:
  base64_encode(b64,(char *)cipher,len);
  SerialMon.println("Encrypted Data output: "+String((char *)b64));
}

void setup()
{
  // Start Serial Monitor
  SerialMon.begin(115200);
  delay(10); // feedback buffer

  // Enable Battery 
  pinMode(BAT_EN, OUTPUT);
  digitalWrite(BAT_EN, HIGH);

  // Sensors Status
  SerialMon.println("\n========================================Sensors Status========================================");
  Wire.begin(21, 22);
  // Slave Connect
  SerialMon.print("Slave: ");
  bool SlaveStatus;
  SlaveStatus = Wire.begin();
  if (!SlaveStatus)
  {
    SerialMon.println(" Failed");
  }
  else {
    SerialMon.println(" OK");
  }
  delay(10);

  // Get Data
  SerialMon.println("");
  getSlave();

  // Initialize GSM
  SerialMon.println("\n========================================GSM Initializing========================================");
  SerialMon.println("Starting GSM...");
  GSMinit();
  SerialMon.print("Waiting for 3s...");
  delay(3000);
  SerialMon.println(" >OK");

  SerialMon.print("Starting Serial Communications...");
  SerialAT.begin(UART_BAUD, SERIAL_8N1, PIN_RX, PIN_TX);
  // Restart takes quite some time
  // To skip it, call init() instead of restart()
  SerialMon.println(" >OK");

  SerialMon.print("Initializing modem...");
  if (!modem.init())
  {
    SerialMon.println(" >Failed (Restarting in 10s)");
    return;
  }
  SerialMon.println(" >OK");
  /*
  2 Automatic
  13 GSM Only
  14 WCDMA Only
  38 LTE Only
  */
  SerialMon.print("Selecting Network Mode...");
  String result;
  result = modem.setNetworkMode(2);
  if (modem.waitResponse(10000L) != 1)
  {
    SerialMon.println(" >OK");
    return;
  }
  SerialMon.println(" >Failed");

  // Setting the SSL cert to the secure_layer obj
  //secure_layer.setCACert(root_ca);
}

void loop()
{
  // APN Connect
  SerialMon.println("\n========================================Connecting to APN========================================");
  SerialMon.print("Connecting to ");
  SerialMon.print(apn);

  if (!modem.gprsConnect(apn, gprsUser, gprsPass))
  {
    SerialMon.println(" >Failed");
  }
  else
  {
    SerialMon.println(" >OK");

    // Server Connect
    SerialMon.println("\n========================================Connecting to Server========================================");
    SerialMon.print("Connecting to ");
    SerialMon.print(server);
    if (!base_client.connect(server, port))
    {
      SerialMon.println(" >Failed");
    }
    else
    {
      SerialMon.println(" >OK");
      String precipitationdata = String(precipitation);
      String windspeeddata = String(windspeed);

      SerialMon.println("====================================== Encryption =========================================================");

      // Print readings results
      SerialMon.println("precipitationdata => "+String(precipitationdata));
      SerialMon.println("windspeeddata => "+String(windspeeddata));

      // Encrypt data
      do_encrypt(String(precipitationdata),key_str,iv_str, encryptedPrecipitation,b64Precipitation);
      do_encrypt(String(windspeeddata),key_str,iv_str, encryptedWindspeed, b64Windspeed);
      String encryptedB64Precipitation = String((char *)b64Precipitation);
      String encryptedB64Windspeed = String((char *)b64Windspeed);
     
      // Making an HTTP POST request

      SerialMon.println("\n========================================HTTP Post Request========================================");
      SerialMon.println("Performing HTTP POST request...");

      SerialMon.println("Connecting to ");
      SerialMon.println(server);

      SerialMon.println("Making POST request securely");
      String contentType = "Content-Type: application/json";
      
      String postData = "{\"key\":\"A197C\",\"loc\":\"Balanga City, Bataan\",\"rainGuage\" :\" " + encryptedB64Precipitation + " \" "+", \"windspeed\": \" " + encryptedB64Windspeed + " \" "+"}";

      SerialMon.println("");
      SerialMon.println("\n=========================================POST Data ============================================");
      SerialMon.println(postData);

      int postDataLength = postData.length();
      client.sendHeader("Content-Length", postDataLength);
      client.sendHeader("Connection", "Close");
      client.post(resource, contentType, postData);

      int status_code = client.responseStatusCode();
      String response = client.responseBody();

      SerialMon.print("Status code: ");
      SerialMon.println(status_code);
      SerialMon.print("Response: ");
      SerialMon.println(response);

      // Close client and disconnect
      SerialMon.println("\n========================================Closing Client========================================");
      client.stop();
      SerialMon.println(F("Server disconnected"));
      modem.gprsDisconnect();
      SerialMon.println(F("GPRS disconnected"));
    }
  }
  // Set Timer and Sleep
  esp_sleep_enable_timer_wakeup(sleeptimer(millis(), TIME_TO_SLEEP) * uS_TO_S_FACTOR);
  esp_deep_sleep_start();
}
