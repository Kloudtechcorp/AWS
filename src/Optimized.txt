#include <Arduino.h>

// ESP32 Serial Monitor
#define SerialMon Serial

// I2C Library
#include <Wire.h>
// BME280 Library
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
// BH1750 Library
#include <BH1750.h>
// Time Library
#include "RtcDS3231.h"
// DHT22 Library
#include <DHT.h>
// BMP Library
#include <Adafruit_BMP085.h>

// GSM Pins - GSM Intiation
#define GSM_PIN "0000"
#define UART_BAUD 115200
#define PIN_DTR      25
#define PIN_TX       26
#define PIN_RX       27
#define PWR_PIN      4
#define PIN_RI       33
#define RESET        5
#define BAT_ADC      35
#define BAT_EN       12

// GSM Serial Monitor
HardwareSerial SerialAT(1);

#define TINY_GSM_MODEM_SIM7600

// GSM RX/TX Buffer - GSM Intiation
#if !defined(TINY_GSM_RX_BUFFER)
#define TINY_GSM_RX_BUFFER 1024
#endif
#define TINY_GSM_YIELD() \
  {                      \
    delay(2);            \
  }

// GSM and Httpclient Libraries
#include <TinyGsmClient.h>
#include <ArduinoHttpClient.h>
#include "SSLClient.h"

TinyGsm modem(SerialAT);

// Website Credentials
const char apn[] = "internet"; // Change this to your Provider details
const char gprsUser[] = "";
const char gprsPass[] = "";
const char server[] = "development.kloudtechsea.com"; // Change this to your selection
const char resource[] = "https://development.kloudtechsea.com/Kloudtrackv4/weather/WeatherReadings/insertDecrypt.php";

const int port = 443;
unsigned long timeout;

// HTTPS Transport
TinyGsmClient base_client(modem,0);
SSLClient secure_layer(&base_client);
HttpClient client = HttpClient(secure_layer,server,port);

// SD Card Definitions
#include "FS.h"
#include "SD.h"
#include "SPI.h"
#define SCK 14
#define MISO 2
#define MOSI 15
#define CS 13
SPIClass spi = SPIClass(VSPI);
char data[50];

// Sleep Factors
#define uS_TO_S_FACTOR 1000
#define TIME_TO_SLEEP 60000

int sleeptimer(int x, int y)
{
  // note f2 cannot be 0
  return y - (x % y);
}

// AS5600 Variables
int magnetStatus = 0, lowbyte, rawAngle, quadrantNumber, previousquadrantNumber;
word highbyte;
float degAngle, numberofTurns = 0, correctedAngle = 0, startAngle = 0, totalAngle = 0, previoustotalAngle = 0;

// UV Parameters
#define uvpin 32
float sensorVoltage, sensorValue; 

// BME280 Parameters
Adafruit_BME280 bme;
float temperature = 0, humidity = 0, pressure = 0;

// BH1750 Parameters
BH1750 lightMeter;
float lux = 0, irradiance = 0;

// Slave Parameters
#define SLAVE_ADDR 0x01
float table[] = {0,0};
float windspeed = 0, raingauge = 0;

// DHT22 Parameters
#define DHTPIN 04
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
float h = 0;

// BMP Parameters
#define seaLevelPressure_hPa 1013.25
Adafruit_BMP085 bmp;
float t = 0, p = 0;

// Redundancy Parameters
float FTemp = 0, FHum = 0, FPres = 0;

// RTC
RtcDS3231<TwoWire> Rtc(Wire);

#define countof(a) (sizeof(a) / sizeof(a[0]))
void printDateTime(const RtcDateTime& dt)
{
  char datestring[26];

  snprintf_P(datestring, 
          countof(datestring),
          PSTR("%02u/%02u/%04u %02u:%02u:%02u"),
          dt.Month(),
          dt.Day(),
          dt.Year(),
          dt.Hour(),
          dt.Minute(),
          dt.Second() );
  SerialMon.print(datestring);
}

// Encryption libraries
#include <base64.h>
#include <AESLib.h>
#include <AES.h>
#include <AES_config.h>

// Encryption Variables
String key_str="aaaaaaaaaaaaaaaa";// 16 bytes
String iv_str="aaaaaaaaaaaaaaaa"; //16 bytes

AES aes;

byte encryptedTemp1[1000], encryptedTemp2[1000], encryptedHum1[1000], encryptedHum2[1000], encryptedPress1[1000], encryptedPress2[1000];
byte encryptedlight[1000], encryptedirradiance[1000], encryptedUVIntensity[1000], encryptedWindDirection[1000], encryptedWindSpeed[1000], encryptedRainGauge[1000];

char b64Temp1[1000], b64Temp2[1000], b64Hum1[1000], b64Hum2[1000], b64Press1[1000], b64Press2[1000];
char b64Light[1000], b64Irradiance[1000], b64UVIntensity[1000], b64WindDirection[1000], b64Windspeed[1000], b64RainGuage[1000];

void getDHT() 
{
  h = dht.readHumidity();
}

void getBMP() 
{
  t = bmp.readTemperature();
  p = bmp.readPressure() / 100;
}

void getUV() 
{
  sensorValue = analogRead(uvpin);
  sensorVoltage = sensorValue/1024*3.3;
}

void getBH() 
{
  lux = lightMeter.readLightLevel();
  irradiance = lightMeter.readLightLevel()/ 683;
}

void getBME() 
{
  temperature = bme.readTemperature();
  humidity = bme.readHumidity();
  pressure = bme.readPressure()/100;
}

void getSlave() 
{
  Wire.requestFrom(SLAVE_ADDR, sizeof(table) * sizeof(float));
  for (int i = 0; i < 2; i++) {
    byte data[sizeof(float)];
    for (int j = 0; j < sizeof(float); j++)
    {
      data[j] = Wire.read();
    }
    float value;
    memcpy(&value, &data, sizeof(float));
    table[i] = value;
  }
  raingauge = table[0];
  windspeed = table[1];
}

void appendFile(fs::FS &fs, String path, String message) 
{
  SerialMon.printf("Appending to file: %s\n", path);

  File file = fs.open(path, FILE_APPEND);
  if (!file)
  {
    SerialMon.println("Failed to open file for appending");
    return;
  }
  if (file.println(message))
  {
    SerialMon.println("Message appended");
  }
  else
  {
    SerialMon.println("Append failed");
  }
  file.close();
}

void createHeader(fs::FS &fs, String path, String message) 
{
  SerialMon.printf("Checking if %s exists...", path);

  File file = fs.open(path);
  if (!file)
  {
    SerialMon.print("\nFile does not exist creating header files now...");
    File file = fs.open(path, FILE_APPEND);
    if (file.println(message))
    {
      SerialMon.println(" >OK");
    }
    else
    {
      SerialMon.println(" >Failed");
    }
    return;
  }
  SerialMon.println(" >OK");
  file.close();
}

void GSMinit() 
{
  // A7670-GSM Reset
  pinMode(RESET, OUTPUT);
  digitalWrite(RESET, LOW);
  delay(100);
  digitalWrite(RESET, HIGH);
  delay(3000);
  digitalWrite(RESET, LOW);

  // A7670-GSM Power
  pinMode(PWR_PIN, OUTPUT);
  digitalWrite(PWR_PIN, LOW);
  delay(100);
  digitalWrite(PWR_PIN, HIGH);
  delay(1000);
  digitalWrite(PWR_PIN, LOW);
}

void ReadRawAngle() 
{ 
  Wire.beginTransmission(0x36);
  Wire.write(0x0D);
  Wire.endTransmission();
  Wire.requestFrom(0x36, 1);
  
  while(Wire.available() == 0);
  lowbyte = Wire.read();
 
  Wire.beginTransmission(0x36);
  Wire.write(0x0C);
  Wire.endTransmission();
  Wire.requestFrom(0x36, 1);
  
  while(Wire.available() == 0);  
  highbyte = Wire.read();
  
  highbyte = highbyte << 8;
  rawAngle = highbyte | lowbyte;
  degAngle = rawAngle * 0.087890625; 
}

void correctAngle() 
{
  correctedAngle = degAngle - startAngle;
  correctedAngle = (360 - (correctedAngle + 48.75));
  if (correctedAngle < 0)
  {
    correctedAngle = correctedAngle + 360;
  }
}

void getDirection() {
  ReadRawAngle();
  correctAngle();
}

// Encryption function
void do_encrypt(String msg, String key_str, String iv_str, byte* cipher, char *b64) {
  byte iv[16];
  // copy the iv_str content to the array.
  memcpy(iv,(byte *) iv_str.c_str(), 16);

  // use base64 encoder to encode the message content. It is optional step.
  int blen=base64_encode(b64,(char *)msg.c_str(),msg.length());

  // calculate the output size:
  aes.calc_size_n_pad(blen);
  // custom padding, in this case, we use zero padding:
  int len=aes.get_size();
  byte plain_p[len];
  for(int i=0;i<blen;++i) plain_p[i]=b64[i];
  for(int i=blen;i<len;++i) plain_p[i]='\0';

  // do AES-128-CBC encryption:
  int blocks = len / 16;
  aes.set_key ((byte *)key_str.c_str(), 16);
  aes.cbc_encrypt (plain_p, cipher, blocks, iv);

  // use base64 encoder to encode the encrypted data:
  base64_encode(b64,(char *)cipher,len);
  SerialMon.println("Encrypted Data output: "+String((char *)b64));
}


void setup()
{
  // Start Serial Monitor
  SerialMon.begin(115200);
  delay(10); // feedback buffer

  // Enable Battery 
  pinMode(BAT_EN, OUTPUT);
  digitalWrite(BAT_EN, HIGH);

  // Sensors Status
  SerialMon.println("\n========================================Sensors Status========================================");
  Wire.begin(21, 22);
  dht.begin();

  // BME Connect
  SerialMon.print("BME280: ");
  bool BMEstatus;
  BMEstatus = bme.begin(0x76);
  if (!BMEstatus)
  {
    SerialMon.println(" Failed");
  }
  else {
    SerialMon.println(" OK");
  }
  delay(10);


  // DHT Connect
  SerialMon.print("DHT22: ");
  if (isnan(h)) {
    SerialMon.println(" Failed");
  }
  else {
    SerialMon.println(" OK");
  }
  delay(10);

  // BMP180 Connect
  SerialMon.print("BMP180: ");
  bool BMPStatus;
  BMPStatus = bmp.begin();
  if (!BMPStatus) {
    SerialMon.println(" Failed");
  }
  else {
    SerialMon.println(" OK");
  }
  delay(10);

  // BH1750 Connect
  SerialMon.print("BH1750: ");
  bool BHStatus;
  BHStatus = lightMeter.begin();
  if (!BHStatus) {
    SerialMon.println(" Failed");
  }
  else {
    SerialMon.println(" OK");
  }
  delay(10);

  // UV Connect
  SerialMon.print("UV: ");
  if (isnan(sensorValue)) {
    SerialMon.println(" Failed");
  }
  else {
    SerialMon.println(" OK");
  }
  delay(10);

  // Slave Connect
  SerialMon.print("Slave: ");
  //Wire.begin(21, 22);
  bool SlaveStatus;
  SlaveStatus = Wire.begin();
  if (!SlaveStatus)
  {
    SerialMon.println(" Failed");
  }
  else {
    SerialMon.println(" OK");
  }
  delay(10);

  // Get Data
  SerialMon.println("");
  getBME();
  getDHT();
  getBMP();
  getBH();
  getUV();
  getSlave();
  getDirection();

  // Redundancy
  SerialMon.println("\n========================================Solving for Redundancy========================================");
  FTemp = (temperature + t) / 2;
  FHum = (humidity + h) / 2;
  FPres = (pressure + p) / 2;
  
  // Time Sync
  SerialMon.println("\n========================================RTC Initializing========================================");
  // Start RTC
  SerialMon.print("Connecting to RTC...");
  Rtc.Begin();
  SerialMon.println(" >OK");
  // Sync Time From RTC
  SerialMon.print("Syncing Time to RTC...");
  RtcDateTime compiled = RtcDateTime(__DATE__, __TIME__);
  printDateTime(compiled);
  Serial.println();
  Rtc.Enable32kHzPin(false);
  Rtc.SetSquareWavePin(DS3231SquareWavePin_ModeNone); 

  RtcDateTime now = Rtc.GetDateTime();
  SerialMon.println(" >OK");
  // Show Time
  SerialMon.print("Time is ");
  printDateTime(now);
  delay(10);

  // Start SD Card
  SerialMon.println("\n========================================SD Card Initializing========================================");
  SerialMon.print("Connecting to SD Card...");
  spi.begin(SCK, MISO, MOSI, CS);
  if (!SD.begin(CS, spi))
  {
    SerialMon.println(" >Failed");
    return;
  }
  SerialMon.println(" >OK");

  uint64_t cardSize = SD.cardSize() / (1024 * 1024);
  String filename = '/' + String(now.Year()) + String(now.Month(), DEC) + String(now.Day(), DEC) + ".csv";
  String datetime = String(now.Hour(), DEC) + ":" + String(now.Minute(), DEC) + ":" + String(now.Second(), DEC) + " , " + String(now.Day(), DEC) + "/" + String(now.Month(), DEC) + "/" + String(now.Year()) + " , ";
  sprintf(data, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f", FHum, FTemp, FPres, raingauge, windspeed, correctedAngle);
  String log = datetime + data;
  createHeader(SD, filename, "Time,Date,Humidity,Temperature,Pressure,Precipitation,WindSpeed,WindDirection");
  appendFile(SD, filename, log);
  SerialMon.println("File Closed");

  // Initialize GSM
  SerialMon.println("\n========================================GSM Initializing========================================");
  SerialMon.println("Starting GSM...");
  GSMinit();
  SerialMon.print("Waiting for 3s...");
  delay(3000);
  SerialMon.println(" >OK");

  SerialMon.print("Starting Serial Communications...");
  SerialAT.begin(UART_BAUD, SERIAL_8N1, PIN_RX, PIN_TX);
  SerialMon.println(" >OK");

  SerialMon.print("Initializing modem...");
  if (!modem.init())
  {
    SerialMon.println(" >Failed (Restarting in 10s)");
    return;
  }
  SerialMon.println(" >OK");

  SerialMon.print("Selecting Network Mode...");
  String result;
  result = modem.setNetworkMode(2);
  if (modem.waitResponse(10000L) != 1)
  {
    SerialMon.println(" >OK");
    return;
  }
  SerialMon.println(" >Failed");
}

void loop()
{
  // APN Connect
  SerialMon.println("\n========================================Connecting to APN========================================");
  SerialMon.print(String("Connecting to ") + apn);

  if (!modem.gprsConnect(apn, gprsUser, gprsPass))
  {
    SerialMon.println(" >Failed");
  }
  else
  {
    SerialMon.println(" >OK");

    // Server Connect
    SerialMon.println("\n========================================Connecting to Server========================================");
    SerialMon.print(String("Connecting to ") + server);
    if (!base_client.connect(server, port))
    {
      SerialMon.println(" >Failed");
    }
    else
    {
      SerialMon.println(" >OK");

      // Variables that contain parameters
      float T1 = temperature, T2 = t, H1 = humidity, H2 = h, P1 = pressure, P2 = p;

      String lightdata = String(lux), irradiancedata = String(irradiance), uvintensitydata = String(sensorValue), winddirectiondata = String(correctedAngle), windspeeddata = String(windspeed), raingaugedata = String(raingauge);

      SerialMon.println("====================================== Encryption =========================================================");

      // Encrypt data
      do_encrypt(String(T1),key_str,iv_str, encryptedTemp1,b64Temp1);
      do_encrypt(String(T2),key_str,iv_str, encryptedTemp2,b64Temp2);
      do_encrypt(String(H1),key_str,iv_str, encryptedHum1,b64Hum1);
      do_encrypt(String(H2),key_str,iv_str, encryptedHum2,b64Hum2);
      do_encrypt(String(P1),key_str,iv_str, encryptedPress1,b64Press1);
      do_encrypt(String(P2),key_str,iv_str, encryptedPress2,b64Press2);

      do_encrypt(String(lightdata),key_str,iv_str, encryptedlight,b64Light);
      do_encrypt(String(irradiancedata),key_str,iv_str, encryptedirradiance,b64Irradiance);
      do_encrypt(String(uvintensitydata),key_str,iv_str, encryptedUVIntensity,b64UVIntensity);
      do_encrypt(String(winddirectiondata),key_str,iv_str, encryptedWindDirection,b64WindDirection);
      do_encrypt(String(windspeeddata),key_str,iv_str, encryptedWindSpeed,b64Windspeed);
      do_encrypt(String(raingaugedata),key_str,iv_str, encryptedRainGauge,b64RainGuage);

      String encryptedB64Temp1 = String((char *)b64Temp1), encryptedB64Temp2 = String((char *)b64Temp2), encryptedB64Hum1 = String((char *)b64Hum1);
      String encryptedB64Hum2 = String((char *)b64Hum2), encryptedB64Press1 = String((char *)b64Press1), encryptedB64Press2 = String((char *)b64Press2);
      String encryptedB64Light = String((char *)b64Light), encryptedB64Irradiance = String((char *)b64Irradiance), encryptedB64UVIntensity = String((char *)b64UVIntensity); 
      String encryptedB64WindDirection = String((char *)b64WindDirection), encryptedB64Windspeed = String((char *)b64Windspeed), encryptedB64RainGuage = String((char *)b64RainGuage);
     
      // Making an HTTP POST request

      SerialMon.println("\n========================================HTTP Post Request========================================");
      SerialMon.println("Performing HTTP POST request...");
      SerialMon.println(String("Connecting to ") + server);
      SerialMon.println("Making POST request securely");
      String contentType = "Content-Type: application/json";
      
      String postData = "{\"key\":\"A197C\",\"loc\":\"Pto. Rivas Ibaba, Balanga City, Bataan\",\"light\" :\" " + encryptedB64Light + " \",\"irradiance\": \" " + encryptedB64Irradiance + " \" ,\"uvIntensity\": \" " + encryptedB64UVIntensity + " \" ,\"windDirection\": \" " + encryptedB64WindDirection + " \" ,\"windSpeed\":"+ " \" " + encryptedB64Windspeed+" \" ,\"rainGuage\":"+ " \" " + encryptedB64RainGuage +" \" ,\"T1\":" + " \" " + encryptedB64Temp1 +" \" ,\"T2\": \" " + encryptedB64Temp2 +" \" ,\"H1\": \" " +  encryptedB64Hum1 + " \" , \"H2\": \" " + encryptedB64Hum2 +" \" ,\"P1\": \" "+encryptedB64Press1+" \" ,\"P2\": \" " + encryptedB64Press2 +" \" "+"}";

      SerialMon.println("");
      SerialMon.println("\n=========================================POST Data ============================================");
      SerialMon.println(postData);

      int postDataLength = postData.length();
      client.sendHeader("Content-Length", postDataLength);
      client.sendHeader("Connection", "Close");
      client.post(resource, contentType, postData);

      int status_code = client.responseStatusCode();
      String response = client.responseBody();

      SerialMon.println(String("Status code: ") + status_code);
      SerialMon.println(String("Response: ") + response);

      // Close client and disconnect
      SerialMon.println("\n========================================Closing Client========================================");
      client.stop();
      SerialMon.println(F("Server disconnected"));
      modem.gprsDisconnect();
      SerialMon.println(F("GPRS disconnected"));
    }
  }
  // Set Timer and Sleep
  esp_sleep_enable_timer_wakeup(sleeptimer(millis(), TIME_TO_SLEEP) * uS_TO_S_FACTOR);
  esp_deep_sleep_start();
}